#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# ------------------------
# Config
# ------------------------
AI_HOME="${AI_HOME:-$HOME/.local_ai}"
MODULES_DIR="$AI_HOME/modules"
DB="$AI_HOME/ai_modules.db"
GIT_REPO_BASE="git@github.com:Loopshape/_NIX-SYSOP-AI-AGENT-by-Aris-Arjuna-Noorsanto"
PYGMENTIZE=$(command -v pygmentize || true)

mkdir -p "$MODULES_DIR"

# ------------------------
# SQLite DB initialization / self-heal
# ------------------------
sqlite3 "$DB" <<'SQL'
CREATE TABLE IF NOT EXISTS modules (
    id INTEGER PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    path TEXT NOT NULL,
    lang TEXT NOT NULL,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
SQL

# Register or update local modules
for file in "$MODULES_DIR"/*.{sh,py,js}; do
    [ -f "$file" ] || continue
    name=$(basename "$file")
    lang=""
    case "$file" in
        *.sh) lang="bash" ;;
        *.py) lang="python" ;;
        *.js) lang="node" ;;
    esac
    sqlite3 "$DB" <<SQL
INSERT OR IGNORE INTO modules (name, path, lang) VALUES ('$name', '$file', '$lang');
UPDATE modules SET last_updated=CURRENT_TIMESTAMP WHERE name='$name';
SQL
done

# ------------------------
# Utility Functions
# ------------------------
highlight_output() {
    if [ -n "$PYGMENTIZE" ]; then
        pygmentize -g
    else
        cat
    fi
}

fetch_module() {
    local module="$1"
    echo "[INFO] Module '$module' missing locally. Attempting to fetch from GitHub..."
    local git_url="$GIT_REPO_BASE/modules/$module"
    local target_path="$MODULES_DIR/$module"

    if git clone --depth 1 "$git_url" "$target_path" 2>/dev/null || curl -fsSL "$git_url" -o "$target_path"; then
        echo "[INFO] Module fetched: $module"
        local lang=""
        case "$target_path" in
            *.sh) lang="bash" ;;
            *.py) lang="python" ;;
            *.js) lang="node" ;;
        esac
        sqlite3 "$DB" <<SQL
INSERT OR IGNORE INTO modules (name, path, lang) VALUES ('$module', '$target_path', '$lang');
SQL
        echo "$target_path $lang"
    else
        echo "[ERROR] Failed to fetch module: $module" >&2
        return 1
    fi
}

# ------------------------
# CLI Entry Point
# ------------------------
if [ $# -lt 1 ]; then
    echo "Usage: ai <module_name> [args...]"
    exit 1
fi

MODULE="$1"
shift

# Lookup module in DB
read path lang <<<$(sqlite3 "$DB" "SELECT path, lang FROM modules WHERE name='$MODULE' LIMIT 1;")

# Auto-fetch missing module
if [ -z "$path" ]; then
    read path lang < <(fetch_module "$MODULE") || exit 1
fi

echo "[INFO] Running $lang module: $MODULE"

# Execute module with syntax highlighting
case "$lang" in
    bash) "$path" "$@" 2>&1 | highlight_output ;;
    python) python3 "$path" "$@" 2>&1 | highlight_output ;;
    node) node "$path" "$@" 2>&1 | highlight_output ;;
    *) echo "[ERROR] Unknown language: $lang" ; exit 1 ;;
esac
