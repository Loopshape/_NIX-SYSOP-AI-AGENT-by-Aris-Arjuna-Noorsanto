#!/usr/bin/env bash
# ~/.bin/ai — Multi-code block syntax highlighting + auto language detection + HTML export

set -euo pipefail
IFS=$'\n\t'

AI_HOME="$HOME/.local_ai"
DB="$AI_HOME/core.db"
PYTHON_BIN="python3"
HTML_EXPORT="$AI_HOME/last_output.html"

mkdir -p "$AI_HOME"

# --- Initialize SQLite DB ---
init_db() {
    sqlite3 "$DB" "CREATE TABLE IF NOT EXISTS mindflow(
        id INTEGER PRIMARY KEY,
        session_id TEXT,
        loop_id INTEGER,
        model_name TEXT,
        output TEXT,
        rank INTEGER,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    );"
    sqlite3 "$DB" "CREATE TABLE IF NOT EXISTS task_logs(
        id INTEGER PRIMARY KEY,
        tool_used TEXT,
        args TEXT,
        output_summary TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    );"
    sqlite3 "$DB" "CREATE TABLE IF NOT EXISTS cache(
        prompt_hash TEXT PRIMARY KEY,
        final_answer TEXT
    );"
}

# --- Python snippet for multi-block syntax highlighting + HTML export ---
highlight_output() {
    local text="$1"
    "$PYTHON_BIN" - <<EOF
import sys, re
from rich.console import Console
from rich.syntax import Syntax
from rich.markup import escape
from pygments.lexers import guess_lexer
from rich import print as rprint
from rich.highlighter import RegexHighlighter
from rich.text import Text
from rich.console import Group
from rich.panel import Panel
from rich.layout import Layout
from rich.syntax import Syntax
from rich.console import Console
from rich.markdown import Markdown
from rich.jupyter import JupyterMixin
from rich.style import Style
from rich.syntax import Syntax

console = Console(record=True)

blocks = re.split(r'```(.*?)```', """$text""", flags=re.DOTALL)
grouped = []

i = 0
while i < len(blocks):
    if i + 1 < len(blocks):
        code = blocks[i+1]
        try:
            lexer = guess_lexer(code)
            lang = lexer.name.lower()
        except Exception:
            lang = "text"
        syntax = Syntax(code, lang, theme="monokai", line_numbers=True)
        grouped.append(syntax)
        i += 2
    else:
        if blocks[i].strip():
            grouped.append(blocks[i])
        i += 1

for g in grouped:
    console.print(g)

# --- Export HTML ---
console.save_html("$HTML_EXPORT", inline_styles=True)
EOF
echo "[*] Exported last AI output to $HTML_EXPORT"
}

# --- Translate Chinese input to English ---
translate_chinese() {
    local prompt="$1"
    "$PYTHON_BIN" - <<PY
from googletrans import Translator
prompt = """$prompt"""
translator = Translator()
if any('\u4e00' <= c <= '\u9fff' for c in prompt):
    translated = translator.translate(prompt, dest='en').text
else:
    translated = prompt
print(translated)
PY
}

# --- Translate English output to German ---
translate_to_german() {
    local text="$1"
    "$PYTHON_BIN" - <<PY
from googletrans import Translator
text = """$text"""
translator = Translator()
translated = translator.translate(text, dest='de').text
print(translated)
PY
}

# --- Detect German in prompt ---
detect_german() {
    local prompt="$1"
    if [[ "$prompt" =~ [äöüßÄÖÜ] ]]; then
        return 0
    else
        return 1
    fi
}

# --- AI logic (placeholder example) ---
run_ai() {
    local prompt="$1"
    local response

    if detect_german "$prompt"; then
        german_mode=1
    else
        german_mode=0
    fi

    prompt=$(translate_chinese "$prompt")

    if [[ "$prompt" =~ "capital of Germany" ]]; then
        response="The capital of Germany is Berlin."
    elif [[ "$prompt" =~ "def " ]]; then
        response="```def greet(name):\n    return f'Hello, {name}!'\n```\n```print(greet('World'))```"
    else
        response="$prompt"
    fi

    if [[ "$german_mode" -eq 1 ]]; then
        response=$(translate_to_german "$response")
    fi

    highlight_output "$response"

    local hash
    hash=$(echo -n "$prompt" | sha256sum | awk '{print $1}')
    sqlite3 "$DB" "INSERT OR REPLACE INTO cache(prompt_hash, final_answer) VALUES ('$hash', '$response');"
}

# --- Main ---
if [ $# -lt 1 ]; then
    echo "Usage: ai 'your prompt'"
    exit 1
fi

init_db
run_ai "$*"