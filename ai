#!/usr/bin/env bash
# ~/.bin/ai — Bulletproof Ollama CLI wrapper
set -euo pipefail
IFS=$'\n\t'

# --- Proot-safe Swap & tmpfs Acceleration ---
SWAP_FILE="$HOME/.local_ai/swapfile"
SWAP_SIZE="512M"  # Adjust size if needed
TMPFS_DIR="$HOME/.local_ai/tmpfs"

mkdir -p "$TMPFS_DIR"

# Mount tmpfs for AI temp files
if ! mountpoint -q "$TMPFS_DIR"; then
    log "Mounting tmpfs for sandbox acceleration..."
    mount -t tmpfs -o size=256M tmpfs "$TMPFS_DIR" 2>/dev/null || true
fi

# Enable swapfile if not already
if [ ! -f "$SWAP_FILE" ]; then
    log "Creating swapfile..."
    dd if=/dev/zero of="$SWAP_FILE" bs=1M count=512
    chmod 600 "$SWAP_FILE"
    mkswap "$SWAP_FILE"
fi

if ! swapon --show | grep -q "$SWAP_FILE"; then
    log "Activating swapfile..."
    sudo swapon "$SWAP_FILE" || log "⚠ Could not activate swapfile"
fi

MODULES=(
  blockchain
  nostr
  lightning
  termux
  proot
  url-parser
  snippet-assembler
)

for m in "${MODULES[@]}"; do
  URL="https://raw.githubusercontent.com/YourGitHubUser/YourRepo/main/modules/$m.sh"
  log "Downloading module $m..."
  curl -fsSL -o "$AI_HOME/modules/$m.sh" "$URL" || log "⚠ Failed to download $m"
done

# Set inotify watches high for AI
if [ -w /proc/sys/fs/inotify/max_user_watches ]; then
    log "Setting inotify max_user_watches to 524288"
    echo 524288 | sudo tee /proc/sys/fs/inotify/max_user_watches >/dev/null
fi

AI_HOME="${HOME}/.local_ai"
DB="$AI_HOME/core.db"
MODULES="$AI_HOME/modules"
MODEL="${AI_MODEL:-2244:latest}"

mkdir -p "$AI_HOME" "$MODULES"

log() { echo -e "[\033[1;32m$(date '+%H:%M:%S')\033[0m] $*"; }

# --- Load environment ---
[ -f "$HOME/.env" ] && source "$HOME/.env"
[ -f "$HOME/.env.local" ] && source "$HOME/.env.local"

# --- Ensure Python3 ---
if ! command -v python3 &>/dev/null; then
    log "Installing python3-full..."
    sudo apt update && sudo apt install -y python3-full
fi

# --- Initialize DB if missing ---
if [ ! -f "$DB" ]; then
    log "Initializing AI core database..."
    sqlite3 "$DB" <<SQL
CREATE TABLE IF NOT EXISTS mindflow(
    id INTEGER PRIMARY KEY,
    session_id TEXT,
    loop_id INTEGER,
    model_name TEXT,
    output TEXT,
    rank INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS task_logs(
    id INTEGER PRIMARY KEY,
    tool_used TEXT,
    args TEXT,
    output_summary TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS cache(
    prompt_hash TEXT PRIMARY KEY,
    final_answer TEXT
);
SQL
fi

# --- Load modules ---
for m in "$MODULES"/*.sh; do
    [ -f "$m" ] && source "$m"
done

# --- Build prompt ---
PROMPT="$*"
if [ -z "$PROMPT" ]; then
    log "Usage: ai 'your question or task'"
    exit 1
fi

# --- Check cache ---
PROMPT_HASH=$(echo -n "$PROMPT" | sha256sum | awk '{print $1}')
CACHED=$(sqlite3 "$DB" "SELECT final_answer FROM cache WHERE prompt_hash='$PROMPT_HASH';")
if [ -n "$CACHED" ]; then
    echo "$CACHED"
    exit 0
fi

# --- Run Ollama ---
OUTPUT=$(ollama run "$MODEL" --prompt "$PROMPT" 2>/dev/null || true)

# --- Auto-translate Chinese to English ---
if echo "$OUTPUT" | grep -P '[\p{Han}]' &>/dev/null; then
    if command -v translate-cli &>/dev/null; then
        OUTPUT=$(translate-cli -t en <<< "$OUTPUT")
    fi
fi

# --- Restrict to English/German output ---
OUTPUT=$(echo "$OUTPUT" | LANG=en_US.UTF-8 perl -pe 's/[\p{^Latin}\p{^Common}]//g')

# --- Store in cache ---
sqlite3 "$DB" "INSERT OR REPLACE INTO cache(prompt_hash, final_answer) VALUES ('$PROMPT_HASH', '$(echo "$OUTPUT" | sqlite3_escape)');"

# --- Print result with optional syntax highlight ---
if command -v pygmentize &>/dev/null && echo "$OUTPUT" | grep -qE '```'; then
    echo "$OUTPUT" | pygmentize -f terminal256 -g
else
    echo "$OUTPUT"
fi

# --- Utility: escape string for SQLite ---
sqlite3_escape() {
    perl -MString::Escape -pe 's/([\'"\\])/\\$1/g'
}