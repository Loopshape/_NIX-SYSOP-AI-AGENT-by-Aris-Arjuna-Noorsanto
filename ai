#!/usr/bin/env bash
# ~/.bin/ai - Enhanced AI CLI with syntax highlighting & language detection

set -euo pipefail
IFS=$'\n\t'

AI_HOME="${HOME}/.local_ai"
SWAP="$AI_HOME/swap"
SANDBOX="$AI_HOME/sandbox"
DB="$AI_HOME/core.db"
mkdir -p "$SWAP" "$SANDBOX" "$AI_HOME/modules"

log(){ echo "[$(date '+%H:%M:%S')] $*"; }

# --- Load environment ---
[ -f "$HOME/.env" ] && source "$HOME/.env"
log "ðŸ”‘ Environment loaded from ~/.env"

# --- Mandatory dependencies ---
for pkg in python3-full curl wget sqlite3 pygmentize; do
    if ! command -v $pkg &>/dev/null; then
        log "Installing missing $pkg..."
        apt install -y $pkg || brew install $pkg || npm install -g $pkg || pip install $pkg
    fi
done

# --- Initialize database ---
if [ ! -f "$DB" ]; then
    log "Initializing AI core database..."
    sqlite3 "$DB" "
    CREATE TABLE IF NOT EXISTS mindflow(
        id INTEGER PRIMARY KEY,
        session_id TEXT,
        loop_id INTEGER,
        model_name TEXT,
        output TEXT,
        rank INTEGER,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    CREATE TABLE IF NOT EXISTS task_logs(
        id INTEGER PRIMARY KEY,
        tool_used TEXT,
        args TEXT,
        output_summary TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    CREATE TABLE IF NOT EXISTS cache(
        prompt_hash TEXT PRIMARY KEY,
        final_answer TEXT
    );
    "
fi

# --- Function to highlight code ---
highlight_code() {
    local text="$1"

    # Highlight fenced code blocks
    text=$(echo "$text" | awk '
    BEGIN { inblock=0; code="" }
    /^```/ {
        if (inblock==0) { inblock=1; lang=substr($0,4); next }
        else { inblock=0
            cmd="echo \"" code "\" | pygmentize -l " (lang?lang:"guess") " -f terminal256"
            system(cmd)
            code=""
            next
        }
    }
    { if (inblock) code = code $0 "\n"; else print $0 }
    ')

    # Highlight inline code marked by `backticks`
    echo "$text" | sed -E 's/`([^`]+)`/$(echo "\1" | pygmentize -l guess -f terminal256)/g'
}

# --- Query AI backend ---
ai_query() {
    local prompt="$1"
    raw_response=$(curl -s -X POST "http://localhost:8080/ask" \
        -H "Content-Type: application/json" \
        -d "{\"prompt\":\"$prompt\"}")

    answer=$(echo "$raw_response" | python3 -c "
import sys, json
try:
    r = json.load(sys.stdin)
    ans = r.get('answer','')
    # Translate Chinese to English if detected
    if any('\u4e00' <= c <= '\u9fff' for c in ans):
        import subprocess
        ans = subprocess.run(['trans', '-b', 'en'], input=ans, text=True, capture_output=True).stdout.strip()
    print(ans)
except Exception:
    print('[!] No valid JSON response. Is AI server running?')
")

    # Cache the answer
    hash=$(echo -n "$prompt" | md5sum | cut -d' ' -f1)
    sqlite3 "$DB" "INSERT OR REPLACE INTO cache(prompt_hash, final_answer) VALUES('$hash', '$(echo "$answer" | sed "s/'/''/g")');"

    # Highlight code in response
    highlight_code "$answer"
}

# --- Main CLI ---
if [ $# -eq 0 ]; then
    log "Usage: ai 'your prompt here'"
    exit 0
fi

PROMPT="$*"

# Check cache
hash=$(echo -n "$PROMPT" | md5sum | cut -d' ' -f1)
cached=$(sqlite3 "$DB" "SELECT final_answer FROM cache WHERE prompt_hash='$hash';")
if [ -n "$cached" ]; then
    highlight_code "$cached"
    exit 0
fi

# Query AI backend
ai_query "$PROMPT"