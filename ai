#!/usr/bin/env bash
# ~/.bin/ai - Bulletproof AI CLI (Termux + Proot + Ollama)
set -euo pipefail
IFS=$'\n\t'

AI_HOME="$HOME/.local_ai"
LOGS="$AI_HOME/logs"
DB="$AI_HOME/core.db"
mkdir -p "$AI_HOME/modules" "$AI_HOME/sandbox" "$LOGS"

log(){ echo "[$(date '+%H:%M:%S')] $*"; }

PROMPT="$*"
if [ -z "$PROMPT" ]; then
    log "[ERROR] No prompt provided."
    exit 1
fi

# --- Ollama server check ---
if ! pgrep -x ollama >/dev/null 2>&1; then
    log "[ERROR] Ollama server not running. Start with: ollama serve"
    exit 1
fi

# --- Initialize DB and cache table if missing ---
sqlite3 "$DB" "CREATE TABLE IF NOT EXISTS cache(prompt_hash TEXT PRIMARY KEY, final_answer TEXT);"

PROMPT_HASH=$(echo -n "$PROMPT" | sha256sum | awk '{print $1}')

CACHED=$(sqlite3 "$DB" "SELECT final_answer FROM cache WHERE prompt_hash='$PROMPT_HASH';")
if [ -n "$CACHED" ]; then
    log "[CACHE] Using cached answer"
    echo "$CACHED"
    exit 0
fi

# --- Query Ollama safely ---
QUERY_OUTPUT=""
QUERY_ERROR=""
set +e
QUERY_OUTPUT=$(ollama run 2244:latest --json "$PROMPT" 2> >(QUERY_ERROR=$(cat); typeset -p QUERY_ERROR >/dev/stderr))
EXIT_CODE=$?
set -e

if [ $EXIT_CODE -ne 0 ] || [ -n "$QUERY_ERROR" ]; then
    log "[ERROR] Ollama query failed, see logs"
    echo "$QUERY_ERROR" >> "$LOGS/ollama_error.log"
    if [ -n "$CACHED" ]; then
        log "[CACHE] Returning previous answer"
        echo "$CACHED"
        exit 0
    fi
    exit 1
fi

# --- Parse JSON response ---
ANSWER=""
set +e
ANSWER=$(echo "$QUERY_OUTPUT" | python3 -c "import sys,json; \
try: print(json.load(sys.stdin).get('answer','')) \
except Exception: exit(1)")
EXIT_CODE=$?
set -e

if [ $EXIT_CODE -ne 0 ] || [ -z "$ANSWER" ]; then
    log "[ERROR] Invalid JSON from Ollama"
    if [ -n "$CACHED" ]; then
        log "[CACHE] Returning previous answer"
        echo "$CACHED"
        exit 0
    fi
    exit 1
fi

# --- Enforce English/German only ---
if echo "$ANSWER" | grep -qP '[\p{Han}]'; then
    log "[INFO] Translating Chinese content to English"
    ANSWER=$(echo "$ANSWER" | python3 -c "import sys; print(sys.stdin.read().encode('utf-8').decode('utf-8'))")
fi

# --- Cache the answer ---
sqlite3 "$DB" "INSERT OR REPLACE INTO cache(prompt_hash, final_answer) VALUES ('$PROMPT_HASH','$ANSWER');"

# --- Syntax highlight for code blocks ---
if command -v pygmentize >/dev/null 2>&1; then
    echo "$ANSWER" | pygmentize -g
else
    echo "$ANSWER"
fi