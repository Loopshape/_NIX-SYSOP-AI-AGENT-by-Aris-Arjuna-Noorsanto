#!/usr/bin/env bash
# ~/.bin/ai â€” CLI with SQLite, syntax highlight, auto-detect input, auto-translate Chinese to English, optional German output

set -euo pipefail
IFS=$'\n\t'

AI_HOME="$HOME/.local_ai"
DB="$AI_HOME/core.db"
PYTHON_BIN="python3"

mkdir -p "$AI_HOME"

# --- Initialize SQLite DB ---
init_db() {
    sqlite3 "$DB" "CREATE TABLE IF NOT EXISTS mindflow(
        id INTEGER PRIMARY KEY,
        session_id TEXT,
        loop_id INTEGER,
        model_name TEXT,
        output TEXT,
        rank INTEGER,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    );"
    sqlite3 "$DB" "CREATE TABLE IF NOT EXISTS task_logs(
        id INTEGER PRIMARY KEY,
        tool_used TEXT,
        args TEXT,
        output_summary TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    );"
    sqlite3 "$DB" "CREATE TABLE IF NOT EXISTS cache(
        prompt_hash TEXT PRIMARY KEY,
        final_answer TEXT
    );"
}

# --- Syntax Highlight + Translate if needed ---
highlight_output() {
    local text="$1"
    local lang="$2"

    "$PYTHON_BIN" - <<EOF
import sys
from rich.console import Console
from rich.syntax import Syntax

console = Console()
syntax = Syntax("""$text""", "$lang", theme="monokai", line_numbers=True)
console.print(syntax)
EOF
}

# --- Translate Chinese input to English ---
translate_chinese() {
    local prompt="$1"
    "$PYTHON_BIN" - <<PY
from googletrans import Translator
prompt = """$prompt"""
translator = Translator()
if any('\u4e00' <= c <= '\u9fff' for c in prompt):
    translated = translator.translate(prompt, dest='en').text
else:
    translated = prompt
print(translated)
PY
}

# --- Translate English output to German if requested ---
translate_to_german() {
    local text="$1"
    "$PYTHON_BIN" - <<PY
from googletrans import Translator
text = """$text"""
translator = Translator()
translated = translator.translate(text, dest='de').text
print(translated)
PY
}

# --- Run AI prompt ---
run_ai() {
    local prompt="$1"
    local response lang="text"

    # Detect German mode
    if [[ "$prompt" =~ ^de: ]]; then
        local german_mode=1
        prompt="${prompt#de:}"  # Remove the de: prefix
    else
        german_mode=0
    fi

    # Translate Chinese input to English
    prompt=$(translate_chinese "$prompt")

    # Example AI logic (replace with your AI engine)
    if [[ "$prompt" =~ "capital of Germany" ]]; then
        response="The capital of Germany is Berlin."
        lang="text"
    elif [[ "$prompt" =~ "def " ]]; then
        response="def greet(name):\n    return f'Hello, {name}!'"
        lang="python"
    else
        response="$prompt"
        lang="text"
    fi

    # Translate output to German if flagged
    if [[ "$german_mode" -eq 1 ]]; then
        response=$(translate_to_german "$response")
    fi

    highlight_output "$response" "$lang"

    # Log to cache
    local hash
    hash=$(echo -n "$prompt" | sha256sum | awk '{print $1}')
    sqlite3 "$DB" "INSERT OR REPLACE INTO cache(prompt_hash, final_answer) VALUES ('$hash', '$response');"
}

# --- Main ---
if [ $# -lt 1 ]; then
    echo "Usage: ai 'your prompt' (prefix with de: for German output)"
    exit 1
fi

init_db
run_ai "$*"