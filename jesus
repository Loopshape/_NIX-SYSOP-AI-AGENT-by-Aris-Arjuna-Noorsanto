<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AGENT NEMODIAN :: Web CLI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Dosis:wght@400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --nemodian-green: #38a169;
            --nemodian-dark: #1a202c;
            --nemodian-light: #2d3748;
        }
        body {
            font-family: 'Dosis', 'Inter', sans-serif;
            background-color: var(--nemodian-dark);
            color: var(--nemodian-green);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        #cli-container {
            width: 100%;
            max-width: 900px;
            height: 95vh;
            border: 2px solid var(--nemodian-green);
            border-radius: 8px;
            background-color: var(--nemodian-light);
            box-shadow: 0 0 20px rgba(56, 161, 105, 0.4);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        #cli-output {
            flex-grow: 1;
            padding: 16px;
            overflow-y: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
            font-size: 0.9rem;
            line-height: 1.4;
            scrollbar-width: thin; /* Firefox */
            scrollbar-color: var(--nemodian-green) var(--nemodian-light);
        }
        #cli-output::-webkit-scrollbar {
            width: 8px;
        }
        #cli-output::-webkit-scrollbar-thumb {
            background-color: var(--nemodian-green);
            border-radius: 4px;
        }
        #cli-output::-webkit-scrollbar-track {
            background-color: var(--nemodian-light);
        }
        #cli-input-line {
            display: flex;
            align-items: center;
            padding: 8px 16px;
            border-top: 2px solid var(--nemodian-green);
        }
        #cli-prompt {
            font-weight: bold;
            color: #48bb78; /* Brighter green */
            margin-right: 8px;
        }
        #cli-input {
            flex-grow: 1;
            background: transparent;
            border: none;
            color: white;
            outline: none;
            font-size: 0.9rem;
            caret-color: var(--nemodian-green);
        }
        .nemodian-title {
            color: #48bb78;
            padding: 8px 16px;
            font-weight: bold;
            border-bottom: 1px solid rgba(56, 161, 105, 0.3);
            font-size: 1.1rem;
        }
        .wallet-table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 10px;
        }
        .wallet-table th, .wallet-table td {
            border: 1px solid rgba(56, 161, 105, 0.5);
            padding: 8px;
            text-align: left;
        }
        .wallet-table th {
            background-color: rgba(56, 161, 105, 0.1);
        }
    </style>
</head>
<body>

<div id="cli-container">
    <div class="nemodian-title">AGENT NEMODIAN v0.1 - NEHEMIAH KERNEL</div>
    <div id="cli-output"></div>
    <div id="cli-input-line">
        <span id="cli-prompt">≫</span>
        <input type="text" id="cli-input" placeholder="Type 'help' and press Enter..." autofocus>
        <div id="loading-indicator" class="hidden ml-4 text-white text-sm">
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-nemodian-green" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
        </div>
    </div>
</div>

<script type="module">
    // --- FIREBASE IMPORTS ---
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    // --- GLOBAL VARIABLES (Provided by Canvas Environment) ---
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
    const API_URL_BASE = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=`;

    // --- DOM Elements ---
    const cliOutput = document.getElementById('cli-output');
    const cliInput = document.getElementById('cli-input');
    const loadingIndicator = document.getElementById('loading-indicator');

    // --- AGENT STATE ---
    let db = null;
    let auth = null;
    let userId = null;
    let walletState = { balance: 0, btc: 0, isReady: false };
    const SESSION_ID = crypto.randomUUID();
    const MODELS = ["code", "coin", "2244", "core", "loop"]; // Simulated multi-brain
    
    // Set Firestore log level for debugging
    setLogLevel('error');

    // --- UTILITY FUNCTIONS ---

    /** Renders content to the CLI output, preserving newlines. */
    const renderOutput = (content, prompt = true) => {
        const line = document.createElement('div');
        line.innerHTML = content;
        cliOutput.appendChild(line);
        cliOutput.scrollTop = cliOutput.scrollHeight; // Auto-scroll
    };

    /** Writes the user input to history. */
    const renderUserInput = (input) => {
        renderOutput(`<span style="color:#48bb78; font-weight:bold;">≫</span> <span style="color:white;">${input}</span>`, false);
    };

    /** Displays the main help menu. */
    const ai_help = () => {
        const helpText = `
<span style="font-weight:bold; color:var(--nemodian-green);">AGENT NEMODIAN CLI – Commands</span>
<span style="color:white;">help</span>                          Show this help
<span style="color:white;"><text prompt></span>                 Send prompt to Multi-Brain (Gemini API)
<span style="color:white;">hash <string></span>               Generate SHA-256 hash of a string
<span style="color:white;">download <url> [file]</span>     Simulate file download (outputs link)
<span style="color:white;">wallet</span>                        Show simulated BTC wallet balance
<span style="color:white;">btc buy <amount></span>          Buy BTC (deduct from balance)
<span style="color:white;">btc sell <amount></span>         Sell BTC (add to balance)
`;
        renderOutput(helpText);
    };

    /** Generates a SHA-256 hash (browser Crypto API). */
    const ai_hash = async (data) => {
        try {
            const msgUint8 = new TextEncoder().encode(data);
            const hashBuffer = await crypto.subtle.digest('SHA-256', msgUint8);
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            renderOutput(`<span style="color:#48bb78;">Hash of "${data}":</span>\n<span style="color:white; font-family:monospace;">${hashHex}</span>`);
        } catch (error) {
            renderOutput(`<span style="color:red;">Error hashing:</span> ${error.message}`);
        }
    };

    /** Simulates file download (browser simulation). */
    const ai_download = (args) => {
        const [url, filename] = args.split(/\s+/).filter(Boolean);
        if (!url) {
            renderOutput(`<span style="color:yellow;">Usage:</span> download <url> [file]`);
            return;
        }
        const file = filename || new URL(url).pathname.split('/').pop() || 'downloaded_file';
        renderOutput(`⚠️ Simulation: Download link created for <span style="color:cyan;">${file}</span> from <span style="color:cyan;">${url}</span>. Open in new tab: <a href="${url}" target="_blank" style="color:cyan; text-decoration:underline;">Click to view/download</a>`);
    };

    // --- FIREBASE / WALLET FUNCTIONS ---

    const getWalletDocRef = () => {
        const walletCollectionPath = `/artifacts/${appId}/users/${userId}/agent_data`;
        return doc(db, walletCollectionPath, 'wallet');
    };

    const wallet_show = () => {
        if (!walletState.isReady) {
            renderOutput('<span style="color:yellow;">Wallet data not yet synced. Please wait.</span>');
            return;
        }
        const table = `
        <table class="wallet-table">
            <thead>
                <tr>
                    <th>Asset</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Fiat Balance (USD)</td>
                    <td style="color:white;">$${walletState.balance.toFixed(2)}</td>
                </tr>
                <tr>
                    <td>BTC Holding</td>
                    <td style="color:white;">${walletState.btc.toFixed(8)}</td>
                </tr>
            </tbody>
        </table>
        `;
        renderOutput(`<span style="font-weight:bold; color:#48bb78;">WALLET STATUS (User: ${userId.substring(0, 8)}...)</span>${table}`);
    };

    const update_wallet = async (amount, isBuy) => {
        if (!walletState.isReady || !userId) {
            renderOutput('<span style="color:red;">Error: Wallet not ready or user not authenticated.</span>');
            return;
        }
        const numericAmount = parseFloat(amount);
        if (isNaN(numericAmount) || numericAmount <= 0) {
            renderOutput('<span style="color:yellow;">Invalid amount. Must be a positive number.</span>');
            return;
        }

        const ref = getWalletDocRef();
        let newBalance, newBtc;

        if (isBuy) {
            if (walletState.balance < numericAmount) {
                renderOutput('<span style="color:red;">Error: Insufficient fiat balance.</span>');
                return;
            }
            newBalance = walletState.balance - numericAmount;
            newBtc = walletState.btc + numericAmount; // 1:1 simulation
            renderOutput(`<span style="color:#48bb78;">Transaction successful:</span> Bought ${numericAmount.toFixed(8)} BTC.`);
        } else { // Sell
            if (walletState.btc < numericAmount) {
                renderOutput('<span style="color:red;">Error: Insufficient BTC holding.</span>');
                return;
            }
            newBalance = walletState.balance + numericAmount;
            newBtc = walletState.btc - numericAmount;
            renderOutput(`<span style="color:#48bb78;">Transaction successful:</span> Sold ${numericAmount.toFixed(8)} BTC.`);
        }

        try {
            // Firestore updates will trigger the onSnapshot listener and update walletState automatically
            await setDoc(ref, { balance: newBalance, btc: newBtc });
            // The wallet_show() call is now handled by the listener
        } catch (e) {
            console.error("Error updating wallet: ", e);
            renderOutput('<span style="color:red;">Database Error: Could not update wallet.</span>');
        }
    };

    // --- GEMINI API ORCHESTRATOR ---

    const retryFetch = async (url, options, maxRetries = 5) => {
        let lastError = null;
        for (let i = 0; i < maxRetries; i++) {
            try {
                const response = await fetch(url, options);
                if (response.status === 429) {
                    throw new Error("Rate limit exceeded (429)");
                }
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! Status: ${response.status}. Details: ${errorText}`);
                }
                return response;
            } catch (error) {
                lastError = error;
                if (i < maxRetries - 1) {
                    const delay = Math.pow(2, i) * 1000 + Math.random() * 1000;
                    // console.warn(`Request failed, retrying in ${delay / 1000}s.`, error);
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }
        throw lastError;
    };

    /** Simulates the Multi-Brain process by calling the Gemini API with Search Grounding. */
    const multi_brain_process = async (prompt) => {
        loadingIndicator.classList.remove('hidden');

        const systemPrompt = `Act as AGENT NEMODIAN, a highly focused, multi-brain orchestrator. The models 'code', 'coin', '2244', 'core', and 'loop' have processed the input. Provide a concise, single-paragraph response that directly addresses the user's prompt in an authoritative and technical tone. Reference any external sources if applicable.`;

        const payload = {
            contents: [{ parts: [{ text: prompt }] }],
            tools: [{ "google_search": {} }],
            systemInstruction: { parts: [{ text: systemPrompt }] },
        };

        const apiKey = "";
        const apiUrl = `${API_URL_BASE}${apiKey}`;

        try {
            const response = await retryFetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            const result = await response.json();
            const candidate = result.candidates?.[0];

            let generatedText = "Error: No response generated from core models.";
            let sources = [];

            if (candidate && candidate.content?.parts?.[0]?.text) {
                generatedText = candidate.content.parts[0].text;

                const groundingMetadata = candidate.groundingMetadata;
                if (groundingMetadata && groundingMetadata.groundingAttributions) {
                    sources = groundingMetadata.groundingAttributions
                        .map(attribution => ({
                            uri: attribution.web?.uri,
                            title: attribution.web?.title,
                        }))
                        .filter(source => source.uri && source.title);
                }
            } else {
                console.error("Unexpected API response structure:", result);
            }

            let output = `<span style="font-weight:bold; color:var(--nemodian-green);">[NEMODIAN CORE]</span> ${generatedText}\n`;
            if (sources.length > 0) {
                output += '\n<span style="color:gray;">--- External Sources ---</span>\n';
                sources.slice(0, 3).forEach((s, i) => {
                    output += `<span style="color:cyan;">[${i + 1}]</span> <a href="${s.uri}" target="_blank" style="color:cyan; text-decoration:underline;">${s.title}</a>\n`;
                });
            }

            renderOutput(output);

        } catch (error) {
            console.error("API Call Error:", error);
            renderOutput(`<span style="color:red;">CRITICAL FAULT:</span> Failed to connect to Multi-Brain pipeline.\nError: ${error.message}`);
        } finally {
            loadingIndicator.classList.add('hidden');
        }
    };


    // --- MAIN COMMAND PROCESSOR ---

    const processCommand = (input) => {
        if (!userId) {
             renderOutput('<span style="color:red;">System not initialized. Please wait for authentication...</span>');
             return;
        }

        const [cmd, ...args] = input.trim().split(/\s+/).filter(Boolean);
        const argStr = args.join(' ');

        if (!cmd) return;

        renderUserInput(input);

        switch (cmd.toLowerCase()) {
            case 'help':
                ai_help();
                break;
            case 'hash':
                if (argStr) { ai_hash(argStr); }
                else { renderOutput('<span style="color:yellow;">Usage:</span> hash <string>'); }
                break;
            case 'download':
                ai_download(argStr);
                break;
            case 'wallet':
                wallet_show();
                break;
            case 'btc':
                if (args.length < 2) {
                    renderOutput('<span style="color:yellow;">Usage:</span> btc [buy|sell] <amount>');
                    break;
                }
                const action = args[0].toLowerCase();
                const amount = args[1];
                if (action === 'buy') {
                    update_wallet(amount, true);
                } else if (action === 'sell') {
                    update_wallet(amount, false);
                } else {
                    renderOutput('<span style="color:yellow;">Invalid BTC command. Use "buy" or "sell".</span>');
                }
                break;
            case 'serve':
                renderOutput('<span style="color:yellow;">"serve" command is a shell function and cannot be replicated in the browser.</span>');
                break;
            default:
                // Pass everything else to the Multi-Brain
                multi_brain_process(input);
                break;
        }
    };

    // --- INITIALIZATION AND AUTH ---

    const setupFirebaseAndAuth = () => {
        try {
            const app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);

            // 1. Initial Authentication
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    renderOutput(`<span style="color:#48bb78;">AGENT NEMODIAN ::</span> Initialized. Session <span style="color:white;">${SESSION_ID.substring(0, 8)}...</span>. User ID <span style="color:white;">${userId.substring(0, 8)}...</span>`);
                    
                    // 2. Setup Wallet Listener
                    const ref = getWalletDocRef();
                    
                    // Check if wallet exists, if not, create default
                    const docSnap = await getDoc(ref);
                    if (!docSnap.exists()) {
                        await setDoc(ref, { balance: 1000.0, btc: 0.0 });
                        renderOutput('<span style="color:yellow;">Initializing new wallet with $1000.00 balance.</span>');
                    }
                    
                    // Start real-time listener
                    onSnapshot(ref, (doc) => {
                        if (doc.exists()) {
                            walletState = { ...doc.data(), isReady: true };
                            // console.log("Wallet updated:", walletState);
                        }
                    }, (error) => {
                        console.error("Firestore Listener Error:", error);
                        renderOutput('<span style="color:red;">CRITICAL FAULT:</span> Wallet listener failed.');
                    });

                } else {
                    // This block will execute if initialAuthToken is null or sign-in fails
                    userId = crypto.randomUUID(); // Use a temp ID if not signed in
                    renderOutput('<span style="color:yellow;">Warning: Anonymous session detected. Wallet data is volatile.</span>');
                }
            });

            // Attempt to sign in with custom token, fall back to anonymous if unavailable
            if (initialAuthToken) {
                signInWithCustomToken(auth, initialAuthToken)
                    .catch(e => {
                        console.error("Custom token sign-in failed, trying anonymous.", e);
                        signInAnonymously(auth);
                    });
            } else {
                signInAnonymously(auth);
            }

        } catch (e) {
            console.error("Firebase Initialization Error:", e);
            renderOutput(`<span style="color:red;">CRITICAL FAULT:</span> Firebase failed to initialize. Check config.`);
        }
    };

    // --- EVENT LISTENERS ---

    cliInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            const input = cliInput.value.trim();
            cliInput.value = '';
            processCommand(input);
        }
    });
    
    // Initial setup call
    window.onload = setupFirebaseAndAuth;

</script>
</body>
</html>
