#!/usr/bin/env node
/**
 * Ultimate floating AI agent
 * - Streams Ollama model '2244' responses
 * - Uses BIP39 hash-flow entropy
 * - Updates dynamic graph and mesh heartbeat
 * - Fully portable & shebang-compliant
 */

import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import fetch from 'node-fetch';
import { getWordEntropy, getWordSequence } from './entropy.js';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- Dynamic state ---
const dynamicState = {
  nodes: [],
  edges: [],
  history: []
};

// --- Express server ---
const app = express();
const port = 3000;
app.use(express.static(path.join(__dirname, 'web')));

app.listen(port, () => {
  console.log(`AI Agent running at http://localhost:${port}`);
});

// --- WebSocket for dynamic updates ---
import { WebSocketServer } from 'ws';
const wss = new WebSocketServer({ port: 3001 });
function broadcast(data) {
  wss.clients.forEach(c => {
    if (c.readyState === c.OPEN) c.send(JSON.stringify(data));
  });
}

// --- API2API streaming with Ollama ---
async function streamOllama(prompt) {
  const res = await fetch('http://localhost:11434/api/generate', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      model: '2244',
      prompt,
      stream: true
    })
  });

  const reader = res.body.getReader();
  const decoder = new TextDecoder();

  while (true) {
    const { value, done } = await reader.read();
    if (done) break;

    const chunk = decoder.decode(value, { stream: true });

    // --- Save history ---
    dynamicState.history.push(chunk);

    // --- Parse JSON commands if available ---
    try {
      const cmd = JSON.parse(chunk);
      if (cmd.action && cmd.args) handleDynamicAction(cmd);
    } catch (e) {
      console.log('Thinking:', chunk);
    }
  }
}

// --- Dynamic action handler ---
function handleDynamicAction(cmd) {
  const { action, args } = cmd;

  switch (action) {
    case 'graph_add_node':
      const nodeId = getWordEntropy(args[0] || 'node');
      dynamicState.nodes.push({ id: nodeId, label: nodeId });
      break;
    case 'graph_add_edge':
      dynamicState.edges.push(args[0]);
      break;
    case 'xdotool':
      try {
        execSync(`xdotool ${args.join(' ')}`);
      } catch (e) { console.error('xdotool error:', e.message); }
      break;
    default:
      console.warn('Unknown action:', action);
  }

  broadcast(dynamicState);
}

// --- Mesh heartbeat example ---
const meshNodes = ['192.168.0.2', '192.168.0.3'];
function pollMesh() {
  meshNodes.forEach(ip => {
    const delay = 1000 + (getWordEntropy(ip).charCodeAt(0) % 2000);
    setTimeout(() => console.log(`Ping ${ip} at ${Date.now()}`), delay);
  });
  setTimeout(pollMesh, 5000);
}
pollMesh();

// --- Example usage ---
(async () => {
  await streamOllama('Open Firefox and search cats');
})();
