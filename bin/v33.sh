#!/usr/bin/env bash                                                                       # AI Autonomic Synthesis Platform v33.0 (Secure Trading Edition)                          # Enhanced with crypto trading capabilities and secure API management                                                                                                               set -euo pipefail                                                                         IFS=$'\n\t'                                                                                                                                                                         # --- SECURITY FIRST: Validate environment ---                                            validate_environment() {                                                                      if [[ -f ~/.env ]]; then                                                                      echo "🔐 WARNING: Global .env file detected. Moving to secure location..."                mv ~/.env ~/.env.backup.$(date +%s)                                                       echo "✅ Secured existing .env file"                                                  fi                                                                                                                                                                                  if [[ "${GOOGLE_API_KEY:-}" == *"AIzaSyD4eva8xXXqFmXvE_t3WTYjMJOZrE4LTUo"* ]]; then           echo "🚨 CRITICAL: Default API key detected! Please regenerate immediately."              return 1                                                                              fi                                                                                    }                                                                                                                                                                                   # --- ENHANCED CONFIGURATION ---                                                          AI_HOME="${AI_HOME:-$HOME/.ai_agent}"                                                     PROJECTS_DIR="${PROJECTS_DIR:-$HOME/ai_projects}"                                         TRADING_UI_DIR="${TRADING_UI_DIR:-$HOME/.local_ai}"                                       LOG_DIR="$AI_HOME/logs"                                                                   TMP_DIR="$AI_HOME/tmp"                                                                    SWAP_DIR="$AI_HOME/swap"                                                                  CORE_DB="$AI_HOME/agent_core.db"                                                          LOG_FILE="$LOG_DIR/system.log"                                                            CONFIG_FILE="$AI_HOME/config"                                                             HMAC_SECRET_KEY="$AI_HOME/secret.key"                                                     API_KEYS_FILE="$AI_HOME/api_keys.gpg"                                                                                                                                               # --- Enhanced Model Configuration ---                                                    MESSENGER_MODEL="llama3:latest"                                                           PLANNER_MODELS=("llama3:latest" "phi3:latest" "qwen2.5:latest")                           EXECUTOR_MODEL="llama3:8b"                                                                TRADING_MODEL="llama3:8b"  # Specialized for trading analysis                             OLLAMA_BIN="$(command -v ollama || echo 'ollama')"                                                                                                                                  # --- Agent Parameters ---                                                                MAX_AGENT_LOOPS=7                                                                         MAX_RAM_BYTES=2097152                                                                     DEPENDENCIES=("git" "npm" "curl" "tar" "nano" "sqlite3" "openssl" "gpg" "$OLLAMA_BIN" "node")                                                                                                                                                                                 # --- COLORS & ICONS ---                                                                  RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'              PURPLE='\033[0;35m'; CYAN='\033[0;36m'; ORANGE='\033[0;33m'; NC='\033[0m'                 ICON_SUCCESS="✅"; ICON_WARN="⚠️"; ICON_ERROR="❌"; ICON_INFO="ℹ️"; ICON_SECURE="🔑"        ICON_TRADE="💰"; ICON_CRYPTO="₿"; ICON_CHART="📊"; ICON_AI="🤖"                                                                                                                     # --- ENHANCED LOGGING ---                                                                init_logging() {                                                                              [[ ! -d "$LOG_DIR" ]] && mkdir -p "$LOG_DIR"                                              exec 3>&1 4>&2                                                                            exec > >(tee -a "$LOG_FILE") 2>&1                                                     }                                                                                                                                                                                   log_to_file(){ echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"; }                 log_msg() {                                                                                   local lvl_color="$1" lvl_icon="$2" lvl_name="$3" msg="$4"                                 local formatted_msg                                                                       formatted_msg=$(printf "${lvl_color}[%s][%s] %s${NC}" "$lvl_name" "$(date '+%T')" "$msg")                                                                                           echo -e "$formatted_msg" >&2                                                              log_to_file "[${lvl_name}] $msg"                                                      }                                                                                                                                                                                   log_debug(){ [[ "${LOG_LEVEL:-INFO}" == "DEBUG" ]] && log_msg "$PURPLE" "🐛" "DEBUG" "$*"; }                                                                                        log_info(){ log_msg "$BLUE" "$ICON_INFO" "INFO" "$*"; }                                   log_warn(){ log_msg "$YELLOW" "$ICON_WARN" "WARN" "$*"; }                                 log_error(){ log_msg "$RED" "$ICON_ERROR" "ERROR" "$*"; return 1; }                       log_success(){ log_msg "$GREEN" "$ICON_SUCCESS" "SUCCESS" "$*"; }                         log_trade(){ log_msg "$CYAN" "$ICON_TRADE" "TRADE" "$*"; }                                log_crypto(){ log_msg "$ORANGE" "$ICON_CRYPTO" "CRYPTO" "$*"; }                                                                                                                     # --- SECURE API KEY MANAGEMENT ---                                                       init_api_keys() {                                                                             if [[ ! -f "$API_KEYS_FILE" ]]; then                                                          log_info "Initializing secure API key storage..."                                         cat > "$TMP_DIR/api_keys.txt" << EOF                                              # Secure API Key Storage                                                                  # This file will be encrypted                                                                                                                                                       GEMINI_API_KEY=${GEMINI_API_KEY:-}                                                        GOOGLE_API_KEY=${GOOGLE_API_KEY:-}                                                        VITE_API_KEY=${VITE_API_KEY:-}                                                            BINANCE_API_KEY=${BINANCE_API_KEY:-}                                                      BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY:-}                                                                                                                                          EOF                                                                                               gpg --batch --yes -c --passphrase "$(get_encryption_key)" "$TMP_DIR/api_keys.txt" > "$API_KEYS_FILE" 2>/dev/null                                                                    rm -f "$TMP_DIR/api_keys.txt"                                                             log_success "API keys encrypted and stored securely"                                  fi                                                                                    }                                                                                                                                                                                   get_api_key() {                                                                               local key_name="$1"                                                                       gpg --batch -d --passphrase "$(get_encryption_key)" "$API_KEYS_FILE" 2>/dev/null | grep "^${key_name}=" | cut -d'=' -f2                                                         }                                                                                                                                                                                   set_api_key() {                                                                               local key_name="$1" key_value="$2"                                                        local temp_file; temp_file=$(mktemp)                                                                                                                                                gpg --batch -d --passphrase "$(get_encryption_key)" "$API_KEYS_FILE" 2>/dev/null > "$temp_file" 2>/dev/null                                                                         grep -v "^${key_name}=" "$temp_file" > "${temp_file}.new"                                 echo "${key_name}=${key_value}" >> "${temp_file}.new"                                     gpg --batch --yes -c --passphrase "$(get_encryption_key)" "${temp_file}.new" > "$API_KEYS_FILE" 2>/dev/null                                                                         rm -f "$temp_file" "${temp_file}.new"                                                     log_success "Updated $key_name securely"                                              }                                                                                                                                                                                   get_encryption_key() {                                                                        local machine_id                                                                          machine_id=$(cat /etc/machine-id 2>/dev/null || hostname)                                 echo "${machine_id}${USER}${AI_HOME}" | sha256sum | cut -d' ' -f1                     }                                                                                                                                                                                   # --- ENHANCED DEPENDENCY CHECKS ---                                                      check_dependencies() {                                                                        log_info "Checking system dependencies..."                                                local missing_deps=0                                                                                                                                                                for dep in "${DEPENDENCIES[@]}"; do                                                           if ! command -v "$dep" &> /dev/null; then                                                     log_warn "Missing dependency: $dep"                                                       ((missing_deps++))                                                                    fi                                                                                    done                                                                                                                                                                                # Check Node.js version                                                                   if command -v node &> /dev/null; then                                                         local node_version                                                                        node_version=$(node --version | cut -d'v' -f2)                                            if [[ "$(echo "$node_version" | cut -d'.' -f1)" -lt 16 ]]; then                               log_warn "Node.js version $node_version is outdated. Recommend v16+"                  fi                                                                                    fi                                                                                                                                                                                  [[ "$missing_deps" -gt 0 ]] && log_warn "$missing_deps dependencies missing"              return 0                                                                              }                                                                                                                                                                                   # --- TRADING-SPECIFIC TOOLS ---                                                          tool_analyze_market() {                                                                       local proj_dir="$1" asset="${2:-BTC/USD}"                                                 log_trade "Analyzing market for $asset"                                                                                                                                             ensure_ollama                                                                             local analysis_prompt="As a crypto trading analyst, provide technical analysis for $asset. Consider: RSI, MACD, support/resistance levels, volume trends, and market sentiment. Format as structured JSON with buy/sell/hold recommendation."                                                                                                                           local analysis                                                                            analysis=$(run_worker_streaming "$TRADING_MODEL" "You are a professional crypto trading analyst." "$analysis_prompt")                                                               echo "Market Analysis for $asset:                                                     $analysis"                                                                                }                                                                                                                                                                                   tool_check_portfolio() {                                                                      local proj_dir="$1"                                                                       log_trade "Checking portfolio status"                                                                                                                                               # Simulate portfolio check - in real implementation, connect to exchange API              local portfolio_data='{                                                                       "total_value": 15420.50,                                                                  "positions": [                                                                                {"asset": "BTC", "amount": 0.5, "value": 34060.25, "pnl": 1204.50},                       {"asset": "ETH", "amount": 5.2, "value": 18650.75, "pnl": -245.25}                    ],                                                                                        "24h_change": 2.4                                                                     }'                                                                                                                                                                                  echo "$portfolio_data" | jq '.' 2>/dev/null || echo "$portfolio_data"                 }                                                                                                                                                                                   tool_execute_trade() {                                                                        local proj_dir="$1" asset="$2" action="$3" amount="$4"                                                                                                                              if [[ ! "$action" =~ ^(BUY|SELL)$ ]]; then                                                    echo "Error: Action must be BUY or SELL"                                                  return 1                                                                              fi                                                                                                                                                                                  if confirm_action "Execute $action $amount of $asset?"; then                                  log_trade "Executing $action order: $amount $asset"                                       # In real implementation, this would call exchange API                                    local order_id="ORD_$(date +%s)$((RANDOM % 1000))"                                        echo "{                                                                                       \"status\": \"EXECUTED\",                                                                 \"order_id\": \"$order_id\",                                                              \"asset\": \"$asset\",                                                                    \"action\": \"$action\",                                                                  \"amount\": \"$amount\",                                                                  \"timestamp\": \"$(date -Iseconds)\"                                                  }"                                                                                    else                                                                                          echo "Trade cancelled by user"                                                        fi                                                                                    }                                                                                                                                                                                   # --- TRADING UI MANAGEMENT ---                                                           tool_launch_trading_ui() {                                                                    local proj_dir="$1"                                                                       log_info "Launching AI Trading Interface..."                                                                                                                                        if [[ ! -d "$TRADING_UI_DIR" ]]; then                                                         log_error "Trading UI directory not found: $TRADING_UI_DIR"                               return 1                                                                              fi                                                                                                                                                                                  cd "$TRADING_UI_DIR"                                                                                                                                                                if [[ ! -f "package.json" ]]; then                                                            log_error "No package.json found in trading UI directory"                                 return 1                                                                              fi                                                                                                                                                                                  # Install dependencies if needed                                                          if [[ ! -d "node_modules" ]]; then                                                            log_info "Installing trading UI dependencies..."                                          npm install                                                                           fi                                                                                                                                                                                  # Build if needed                                                                         if [[ ! -d "dist" ]]; then                                                                    log_info "Building trading interface..."                                                  npm run build                                                                         fi                                                                                                                                                                                  log_success "Starting trading UI on port 3000..."                                         npm run dev &                                                                             local ui_pid=$!                                                                           echo "$ui_pid" > "$proj_dir/trading_ui.pid"                                               log_success "Trading UI started (PID: $ui_pid). Access at: http://localhost:3000"     }                                                                                                                                                                                   tool_stop_trading_ui() {                                                                      local proj_dir="$1"                                                                       local pid_file="$proj_dir/trading_ui.pid"                                                                                                                                           if [[ -f "$pid_file" ]]; then                                                                 local pid                                                                                 pid=$(cat "$pid_file")                                                                    if kill "$pid" 2>/dev/null; then                                                              log_success "Stopped trading UI (PID: $pid)"                                              rm -f "$pid_file"                                                                     else                                                                                          log_warn "Could not stop trading UI process $pid"                                     fi                                                                                    else                                                                                          log_warn "No trading UI PID file found"                                               fi                                                                                    }                                                                                                                                                                                   # --- ENHANCED INITIALIZATION ---                                                         init_environment() {                                                                          validate_environment                                                                      mkdir -p "$AI_HOME" "$PROJECTS_DIR" "$LOG_DIR" "$TMP_DIR" "$SWAP_DIR"                                                                                                               if [[ ! -f "$CONFIG_FILE" ]]; then                                                            cat > "$CONFIG_FILE" << EOF                                                       # AI Trading Agent Configuration                                                          LOG_LEVEL=INFO                                                                            MAX_MEMORY_GB=4                                                                           AUTO_BACKUP=true                                                                          TRADING_ENABLED=true                                                                      DEFAULT_MODEL=llama3:latest                                                                                                                                                         # Trading Configuration                                                                   DEFAULT_ASSET=BTC/USD                                                                     RISK_TOLERANCE=MEDIUM                                                                     MAX_POSITION_SIZE=0.1                                                                     EOF                                                                                               log_success "Created default configuration"                                           fi                                                                                                                                                                                  init_api_keys                                                                             init_db                                                                                   init_emoji_map                                                                        }                                                                                                                                                                                   # --- ENHANCED CORE FUNCTIONS (from original script) ---                                  # [Include all the original core functions like:                                          # sqlite_escape, register_schema, init_db, calculate_hmac,                                # hash_string, semantic_hash_prompt, store_output_fast,                                   # retrieve_output_fast, get_cached_response, add_to_memory_fast,                          # ensure_ollama, run_worker_fast, run_worker_streaming,                                   # confirm_action, run_agi_workflow]                                                       # ... (keeping all the original core functionality)                                                                                                                                 # --- ENHANCED MAIN DISPATCHER ---                                                        main() {                                                                                      init_logging                                                                              init_environment                                                                                                                                                                    local cmd="${1:-}"                                                                                                                                                                  case "$cmd" in                                                                                --help|-h)                                                                                    show_enhanced_help                                                                        ;;                                                                                    serve|--serve)                                                                                launch_web_interface                                                                      ;;                                                                                    trade|--trade)                                                                                shift                                                                                     handle_trading_commands "$@"                                                              ;;                                                                                    analyze|--analyze)                                                                            shift                                                                                     run_agi_workflow "Analyze crypto market and provide trading insights for: $*"             ;;                                                                                    portfolio|--portfolio)                                                                        check_dependencies                                                                        ensure_ollama                                                                             tool_check_portfolio "$PROJECTS_DIR/portfolio"                                            ;;                                                                                    launch-ui|--launch-ui)                                                                        tool_launch_trading_ui "$PROJECTS_DIR/ui"                                                 ;;                                                                                    stop-ui|--stop-ui)                                                                            tool_stop_trading_ui "$PROJECTS_DIR/ui"                                                   ;;                                                                                    api-key|--api-key)                                                                            shift                                                                                     handle_api_key_commands "$@"                                                              ;;                                                                                    --build|build)                                                                                build_trading_ui                                                                          ;;                                                                                    --status|status)                                                                              show_enhanced_status                                                                      ;;                                                                                    --heal|heal|--fix|fix)                                                                        enhanced_self_heal                                                                        ;;                                                                                    --secure|secure)                                                                              run_security_audit                                                                        ;;                                                                                    "")                                                                                           log_warn "No command provided. Use --help for usage information."                         show_enhanced_help                                                                        ;;                                                                                    *)                                                                                            # Default: AGI workflow with trading context                                              ensure_ollama                                                                             run_agi_workflow "$@"                                                                     ;;                                                                                esac                                                                                  }                                                                                                                                                                                   # --- ENHANCED HELP ---                                                                   show_enhanced_help() {                                                                        cat << EOF                                                                            Usage: ai <command> [options]                                                                                                                                                       AI Trading Commands:                                                                        trade [asset]              Analyze and trade specific asset                               analyze <query>            Market analysis with AI                                        portfolio                  Check portfolio status                                         launch-ui                  Start trading web interface                                    stop-ui                    Stop trading interface                                                                                                                                 API Key Management:                                                                         api-key set <key> <value>  Securely store API key                                         api-key get <key>          Retrieve encrypted API key                                     api-key list               Show available keys                                                                                                                                    System & Security:                                                                          secure                     Run security audit                                             status                     Enhanced system status                                         heal                       Advanced self-repair                                           build                      Build trading interface                                                                                                                                Core AI:                                                                                    serve                      Launch AI web interface                                        <prompt>                   Run AGI workflow                                               --auto                     Automatic analysis mode                                                                                                                                Examples:                                                                                   ai trade BTC/USD                                                                          ai analyze "ETH technical analysis"                                                       ai api-key set GEMINI_API_KEY your_key_here                                               ai launch-ui                                                                              ai portfolio                                                                            EOF                                                                                       }                                                                                                                                                                                   # --- ENHANCED STATUS ---                                                                 show_enhanced_status() {                                                                      log_info "🤖 AI Trading Agent Status"                                                     echo "=== SYSTEM ==="                                                                     echo "  AI Home: $AI_HOME"                                                                echo "  Projects: $PROJECTS_DIR"                                                          echo "  Trading UI: $TRADING_UI_DIR"                                                      echo "  Logs: $LOG_FILE"                                                                                                                                                            echo "=== SERVICES ==="                                                                   if curl -s http://localhost:11434/api/tags >/dev/null; then                                   echo "  Ollama: ✅ Running"                                                               local models                                                                              models=$(curl -s http://localhost:11434/api/tags | jq -r '.models[].name' 2>/dev/null || echo "Unknown")                                                                            echo "  Models: $models"                                                              else                                                                                          echo "  Ollama: ❌ Stopped"                                                           fi                                                                                                                                                                                  if ps aux | grep -v grep | grep "vite\|node" | grep -q "3000"; then                           echo "  Trading UI: ✅ Running on :3000"                                              else                                                                                          echo "  Trading UI: ❌ Stopped"                                                       fi                                                                                                                                                                                  echo "=== SECURITY ==="                                                                   if [[ -f "$API_KEYS_FILE" ]]; then                                                            echo "  API Keys: ✅ Encrypted"                                                       else                                                                                          echo "  API Keys: ❌ Not configured"                                                  fi                                                                                                                                                                                  check_dependencies                                                                    }                                                                                                                                                                                   # --- API KEY MANAGEMENT ---                                                              handle_api_key_commands() {                                                                   local subcmd="${1:-}"                                                                     case "$subcmd" in                                                                             set)                                                                                          local key_name="$2" key_value="$3"                                                        if [[ -z "$key_value" ]]; then                                                                log_error "Usage: ai api-key set <KEY_NAME> <value>"                                      return 1                                                                              fi                                                                                        set_api_key "$key_name" "$key_value"                                                      ;;                                                                                    get)                                                                                          local key_name="$2"                                                                       if [[ -z "$key_name" ]]; then                                                                 log_error "Usage: ai api-key get <KEY_NAME>"                                              return 1                                                                              fi                                                                                        get_api_key "$key_name"                                                                   ;;                                                                                    list)                                                                                         gpg --batch -d --passphrase "$(get_encryption_key)" "$API_KEYS_FILE" 2>/dev/null | grep -v "^#" || log_warn "No API keys stored"                                                    ;;                                                                                    *)                                                                                            log_error "Unknown api-key command: $subcmd"                                              echo "Usage: ai api-key {set|get|list}"                                                   return 1                                                                                  ;;                                                                                esac                                                                                  }                                                                                                                                                                                   # --- TRADING COMMAND HANDLER ---                                                         handle_trading_commands() {                                                                   local asset="${1:-BTC/USD}"                                                               ensure_ollama                                                                                                                                                                       case "$asset" in                                                                              analyze|--analyze)                                                                            shift                                                                                     tool_analyze_market "$PROJECTS_DIR/trade" "${1:-BTC/USD}"                                 ;;                                                                                    list|--list)                                                                                  echo "Supported assets: BTC/USD, ETH/USD, SOL/USD, ADA/USD, DOT/USD"                      ;;                                                                                    *)                                                                                            run_agi_workflow "Provide trading analysis and potential setup for $asset. Consider technical indicators, market sentiment, and risk management."                                   ;;                                                                                esac                                                                                  }                                                                                                                                                                                   # --- ENHANCED SELF HEAL ---                                                              enhanced_self_heal() {                                                                        log_info "🔧 Running enhanced self-heal sequence..."                                                                                                                                # Security first                                                                          validate_environment                                                                                                                                                                # System dependencies                                                                     check_dependencies                                                                                                                                                                  # Cleanup                                                                                 log_info "Cleaning temporary files..."                                                    find "$TMP_DIR" -type f -mtime +1 -delete 2>/dev/null || true                             find "$SWAP_DIR" -type f -mtime +7 -delete 2>/dev/null || true                                                                                                                      # Database maintenance                                                                    if command -v sqlite3 >/dev/null && [[ -f "$CORE_DB" ]]; then                                 log_info "Optimizing database..."                                                         sqlite3 "$CORE_DB" "VACUUM; ANALYZE;" 2>/dev/null || true                             fi                                                                                                                                                                                  # Trading UI maintenance                                                                  if [[ -d "$TRADING_UI_DIR" ]]; then                                                           log_info "Checking trading UI..."                                                         cd "$TRADING_UI_DIR"                                                                      if [[ -d "node_modules" ]]; then                                                              log_info "Cleaning node modules cache..."                                                 npm cache clean --force 2>/dev/null || true                                           fi                                                                                    fi                                                                                                                                                                                  log_success "Enhanced self-heal completed"                                            }                                                                                                                                                                                   # --- SECURITY AUDIT ---                                                                  run_security_audit() {                                                                        log_info "🔍 Running security audit..."                                                                                                                                             local issues=0                                                                                                                                                                      # Check for exposed API keys                                                              if env | grep -q "AIzaSy"; then                                                               log_warn "Found potential API key in environment"                                         ((issues++))                                                                          fi                                                                                                                                                                                  # Check file permissions                                                                  if [[ -f "$HMAC_SECRET_KEY" ]] && [[ "$(stat -c %a "$HMAC_SECRET_KEY")" != "600" ]]; then                                                                                               log_warn "Insecure permissions on HMAC secret key"                                        ((issues++))                                                                          fi                                                                                                                                                                                  if [[ -f "$API_KEYS_FILE" ]] && [[ "$(stat -c %a "$API_KEYS_FILE")" != "600" ]]; then         log_warn "Insecure permissions on API keys file"                                          ((issues++))                                                                          fi                                                                                                                                                                                  # Check for old .env files                                                                if find ~ -name ".env" -mtime -7 2>/dev/null | grep -q ".env"; then                           log_warn "Found .env files in home directory"                                             ((issues++))                                                                          fi                                                                                                                                                                                  if [[ "$issues" -eq 0 ]]; then                                                                log_success "Security audit passed - no issues found"                                 else                                                                                          log_warn "Security audit found $issues potential issues"                              fi                                                                                    }                                                                                                                                                                                   # --- BUILD TRADING UI ---                                                                build_trading_ui() {                                                                          log_info "Building AI Trading Interface..."                                                                                                                                         if [[ ! -d "$TRADING_UI_DIR" ]]; then                                                         log_error "Trading UI directory not found: $TRADING_UI_DIR"                               return 1                                                                              fi                                                                                                                                                                                  cd "$TRADING_UI_DIR"                                                                                                                                                                if [[ ! -f "package.json" ]]; then                                                            log_error "No package.json found - cannot build"                                          return 1                                                                              fi                                                                                                                                                                                  # Install dependencies                                                                    log_info "Installing dependencies..."                                                     npm install                                                                                                                                                                         # Build project                                                                           log_info "Building project..."                                                            if npm run build; then                                                                        log_success "Trading UI built successfully"                                               echo "📦 Build complete: $TRADING_UI_DIR/dist"                                        else                                                                                          log_error "Build failed"                                                                  return 1                                                                              fi                                                                                    }                                                                                                                                                                                   # --- LAUNCH WEB INTERFACE (from original) ---                                            launch_web_interface() {                                                                      exec node --input-type=module - "$0" "$@" <<'NODE_EOF'                                // [Keep the original Node.js web server code here]                                       // ... (original web interface code)                                                      NODE_EOF                                                                                  }                                                                                                                                                                                   # --- INCLUDE ORIGINAL CORE FUNCTIONS ---                                                 # [Paste all the original functions from your existing script here]                       # sqlite_escape, register_schema, init_db, calculate_hmac, etc.                           # ... (your existing core functionality)                                                                                                                                            # --- SCRIPT ENTRY POINT ---                                                              if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then                                                  main "$@"                                                                             fi