#!/usr/bin/env bash
# ~/bin/aid - AI Agent Persistent Shell v9.0
set -euo pipefail
IFS=$'\n\t'

# --- CONFIGURATION ---
AI_HOME="${AI_HOME:-$HOME/.ai_agent}"
PROJECTS_DIR="${PROJECTS_DIR:-$HOME/ai_projects}"

DEFAULT_MESSENGER_MODEL="gemma3:1b"
DEFAULT_COMBINATOR_MODEL="deepseek-r1:1.5b"
DEFAULT_TRADER_MODEL="2244-1"

MESSENGER_MODEL=""
COMBINATOR_MODEL=""
TRADER_MODEL=""

OLLAMA_BIN="$(command -v ollama || true)"
MEMORY_DB="$AI_HOME/memory.db"
CONFIG_DB="$AI_HOME/config.db"

API_PORT="${API_PORT:-8080}"
API_PID_FILE="$AI_HOME/api.pid"
MAX_AGENT_ITERATIONS=10

# --- COLORS ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'
BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'; ORANGE='\033[0;33m'; NC='\033[0m'

log() { printf "${BLUE}[%s]${NC} %s\n" "$(date '+%T')" "$*"; }
log_success() { log "${GREEN}$*${NC}"; }
log_warn() { log "${YELLOW}WARN: $*${NC}"; }
log_error() { log "${RED}ERROR: $*${NC}"; exit 1; }
log_info() { log "${CYAN}$*${NC}"; }
log_phase() {
    echo -e "\n${PURPLE}▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓${NC}"
    log "${PURPLE}$*${NC}"
    echo -e "${PURPLE}▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓${NC}"
}

# --- DB UTILITIES ---
sqlite_escape() { echo "$1" | sed "s/'/''/g"; }
init_db() {
    mkdir -p "$AI_HOME"
    sqlite3 "$MEMORY_DB" "CREATE TABLE IF NOT EXISTS memories (id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, prompt TEXT, response TEXT, task_id TEXT);" 2>/dev/null || true
    sqlite3 "$CONFIG_DB" "CREATE TABLE IF NOT EXISTS config (key TEXT PRIMARY KEY, value TEXT);" 2>/dev/null || true
}
set_config() { sqlite3 "$CONFIG_DB" "INSERT OR REPLACE INTO config (key,value) VALUES ('$(sqlite_escape "$1")','$(sqlite_escape "$2")');"; log_success "Config set: $1 = $2"; }
get_config() { sqlite3 "$CONFIG_DB" "SELECT value FROM config WHERE key='$(sqlite_escape "$1")';" 2>/dev/null; }
load_config_values() {
    MESSENGER_MODEL="$(get_config messenger_model || echo "$DEFAULT_MESSENGER_MODEL")"
    COMBINATOR_MODEL="$(get_config combinator_model || echo "$DEFAULT_COMBINATOR_MODEL")"
    TRADER_MODEL="$(get_config trader_model || echo "$DEFAULT_TRADER_MODEL")"
}
add_to_memory() { sqlite3 "$MEMORY_DB" "INSERT INTO memories (prompt,response,task_id) VALUES ('$(sqlite_escape "$1")','$(sqlite_escape "$2")','$3');" 2>/dev/null; }
search_memory() { sqlite3 -header -column "$MEMORY_DB" "SELECT timestamp,prompt,response FROM memories WHERE prompt LIKE '%$(sqlite_escape "$1")%' ORDER BY timestamp DESC LIMIT 5;" 2>/dev/null; }

# --- HASHING ---
gen_task_id() { echo -n "$1$(date +%s%N)$RANDOM${AI_SEED:-}" | sha256sum | cut -c1-16; }

# --- CORE TOOLS ---
confirm_action() { echo -e "${YELLOW}CONFIRM: $1${NC}"; read -p "Type 'yes' to confirm: " -r r; [[ "$r" == "yes" ]]; }
tool_read_file() { [[ -f "$1" ]] && cat "$1" || echo "ERROR: File not found: $1"; }
tool_list_directory() { [[ -d "$1" ]] && tree -L 2 "$1" || echo "ERROR: Directory not found: $1"; }
tool_web_search() { local q="$1"; confirm_action "Search web for: $q" && curl -sL "https://html.duckduckgo.com/html/?q=$(jq -nr --arg q "$q" '$q|@uri')" | lynx -dump -stdin -nolist || echo "ACTION CANCELED"; }
tool_write_file() { local p="$1" c="$2"; confirm_action "Write to file: $p" && mkdir -p "$(dirname "$p")" && echo -e "$c" > "$p" && echo "SUCCESS: File written." || echo "ACTION CANCELED"; }

# --- AI WORKER ---
ensure_ollama_server() { pgrep -f "ollama serve" >/dev/null || (log "Starting Ollama server..." && nohup "$OLLAMA_BIN" serve >/dev/null 2>&1 & sleep 3); }

run_worker_raw() {
    local model="$1" system_prompt="$2" conversation_history="$3"
    ensure_ollama_server
    local temperature="$(get_config temperature || echo "0.7")"
    local top_p="$(get_config top_p || echo "0.9")"
    local seed="$(get_config seed || echo "")"
    local response_buffer=""
    local fifo_path=$(mktemp -u)
    mkfifo "$fifo_path"

    ( "$OLLAMA_BIN" run --verbose "$model" --temperature "$temperature" --top-p "$top_p" ${seed:+--seed "$seed"} "$system_prompt\n$conversation_history" 2>&1 > "$fifo_path" ) &
    local ollama_pid=$!

    while IFS= read -r line < "$fifo_path"; do
        [[ -z "$line" ]] && continue
        if [[ "$line" =~ ^\>\>\> ]]; then
            echo -e "${YELLOW}$line${NC}"
        elif [[ "$line" =~ ^\{.*\}$ ]]; then
            local token=$(echo "$line" | jq -r '.response? // empty' 2>/dev/null)
            local done_status=$(echo "$line" | jq -r '.done? // false' 2>/dev/null)
            [[ -n "$token" ]] && { printf '%s' "$token"; response_buffer+="$token"; }
            [[ "$done_status" == "true" ]] && printf '\n'
        else
            echo -e "${BLUE}$line${NC}"
        fi
    done

    wait "$ollama_pid" 2>/dev/null || true
    rm -f "$fifo_path"
    echo "$response_buffer"
}

# --- TRIUMVIRATE AGENT ---
run_triumvirate_agent() {
    local user_prompt="$*"
    log_phase "PHASE 0: SETUP"
    local task_id=$(gen_task_id "$user_prompt")
    local task_dir="$PROJECTS_DIR/$task_id"
    mkdir -p "$task_dir"

    local relevant_memories=$(search_memory "$user_prompt")

    log_phase "PHASE 1: ASYNCHRONOUS BRAINSTORMING"
    local messenger_log="$task_dir/messenger.log"
    local combinator_log="$task_dir/combinator.log"

    local messenger_prompt="You are MESSENGER. Analyze thoroughly. TOOLS: list_directory, web_search, read_file. User: $user_prompt"
    local combinator_prompt="You are COMBINATOR. Brainstorm solutions. TOOLS: write_file. User: $user_prompt"

    run_worker_raw "$MESSENGER_MODEL" "$messenger_prompt" "$relevant_memories" > "$messenger_log" 2>&1 &
    local messenger_pid=$!
    run_worker_raw "$COMBINATOR_MODEL" "$combinator_prompt" "$relevant_memories" > "$combinator_log" 2>&1 &
    local combinator_pid=$!

    # Spinner
    local spinner='/-\|'
    printf "${CYAN}Brainstorming... ${NC}"
    local i=0
    while kill -0 "$messenger_pid" 2>/dev/null || kill -0 "$combinator_pid" 2>/dev/null; do
        printf "\b%s" "${spinner:i++%${#spinner}:1}"
        sleep 0.1
    done
    printf "\b Done.\n"

    local messenger_response=$(<"$messenger_log")
    local combinator_response=$(<"$combinator_log")

    log_phase "PHASE 2: SYNTHESIS & EXECUTION"
    local trader_prompt="You are TRADER. Synthesize messenger & combinator. Produce [FINAL_ANSWER].\n---M---\n$messenger_response\n---C---\n$combinator_response"
    local trader_response=$(run_worker_raw "$TRADER_MODEL" "$trader_prompt" "$relevant_memories")

    log_phase "PHASE 3: FINALIZATION"
    if echo "$trader_response" | grep -q '\[FINAL_ANSWER\]'; then
        log_success "Trader produced final answer."
        local final_payload=$(echo "$trader_response" | sed -n '/\[FINAL_ANSWER\]/,$p' | sed '1d' | jq -sR .)
        add_to_memory "$user_prompt" "$trader_response" "$task_id"
    else
        log_warn "Trader did not produce [FINAL_ANSWER]."
    fi
    echo "$trader_response"
}

# --- TMUX/SCREEN PERSISTENT ---
SESSION_NAME="aid_agent"
USE_TMUX=true

launch_session() {
    if $USE_TMUX; then
        if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
            tmux new-session -d -s "$SESSION_NAME" "$HOME/bin/aid $*"
        fi
        tmux attach -t "$SESSION_NAME"
    else
        if ! screen -list | grep -q "$SESSION_NAME"; then
            screen -dmS "$SESSION_NAME" "$HOME/bin/aid $*"
        fi
        screen -r "$SESSION_NAME"
    fi
}

# --- MAIN ---
show_help() {
    echo -e "${GREEN}AI Agent v9.0${NC}\nUsage: aid [OPTIONS] \"Prompt\"\n--seed <phrase>\n--setup\n--help"
}

main() {
    init_db
    load_config_values

    [[ $# -eq 0 ]] && { show_help; exit 0; }

    if [[ "$1" == "--seed" ]]; then
        [[ $# -lt 3 ]] && log_error "Usage: aid --seed <phrase> \"<prompt>\""
        export AI_SEED="$2"; shift 2
    fi

    case "${1:-}" in
        "--setup")
            log_info "Installing dependencies..."
            command -v apt-get &>/dev/null && sudo apt-get update && sudo apt-get install -y sqlite3 jq curl tree lynx
            command -v brew &>/dev/null && brew install sqlite jq curl tree lynx
            log_success "Setup complete."
            ;;
        "--help") show_help ;;
        *) launch_session "$@" ;;
    esac
}

trap 'log_warn "Interrupted"; exit 1' INT TERM
[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
