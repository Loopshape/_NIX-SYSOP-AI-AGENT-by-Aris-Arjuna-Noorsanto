#!/usr/bin/env bash
# AGI-DEX-MEX-AIM Full Self-Healing Agent v2.0

set -euo pipefail
IFS=$'\n\t'

# --- PATHS & CONFIG ---
AI_BIN="$HOME/bin/ai"
AI_AGENT_HOME="$HOME/.ai_agent"
AI_BUILDER="$HOME/.ai_builder"
AI_CODER="$HOME/.ai_coder"
PROJECTS_DIR="$AI_AGENT_HOME/projects"
GIT_REPO="git@github.com:Loopshape/BITBOY-AI-DEX.git"
GIT_LOCAL_DIR="$PROJECTS_DIR/BITBOY-AI-DEX"
LOG_FILE="$AI_AGENT_HOME/ai.log"

MESSENGER_MODEL="gemma3:1b"
COMBINATOR_MODEL="deepseek-r1:1.5b"
TRADER_MODEL="2244-1"

OLLAMA_BIN="$(command -v ollama || true)"
API_PORT=8080
MAX_TRIUMVIRATE_ROUNDS=5

# --- LOGGING ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'
BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'; NC='\033[0m'
log() { echo -e "[$(date '+%H:%M:%S')] $1"; echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"; }

# --- DIRECTORY SETUP ---
setup_dirs() {
  for d in "$AI_AGENT_HOME" "$PROJECTS_DIR" "$AI_BUILDER" "$AI_CODER"; do
    mkdir -p "$d"
  done
  log "${GREEN}Directories verified${NC}"
}

# --- DATABASES ---
MEMORY_DB="$AI_AGENT_HOME/memory.db"
HASH_DB="$AI_AGENT_HOME/hashes.db"
CONFIG_DB="$AI_AGENT_HOME/config.db"

init_db() {
  sqlite3 "$MEMORY_DB" "CREATE TABLE IF NOT EXISTS memories(id INTEGER PRIMARY KEY, prompt TEXT, response TEXT, ts DATETIME DEFAULT CURRENT_TIMESTAMP);" 2>/dev/null
  sqlite3 "$HASH_DB" "CREATE TABLE IF NOT EXISTS hashes(id INTEGER PRIMARY KEY, type TEXT, target TEXT, hash TEXT, ts DATETIME DEFAULT CURRENT_TIMESTAMP);" 2>/dev/null
  sqlite3 "$CONFIG_DB" "CREATE TABLE IF NOT EXISTS config(key TEXT PRIMARY KEY, value TEXT);" 2>/dev/null
  log "${GREEN}Databases initialized${NC}"
}

sqlite3_escape() { echo "$1" | sed "s/'/''/g"; }

# --- SELF-HEALING ---
check_dependencies() {
  local deps=(sqlite3 git curl nc)
  local missing=()
  for d in "${deps[@]}"; do command -v "$d" &>/dev/null || missing+=("$d"); done
  if [ ${#missing[@]} -gt 0 ]; then
    log "${YELLOW}Installing missing dependencies: ${missing[*]}${NC}"
    sudo apt-get update && sudo apt-get install -y "${missing[@]}"
  fi
}

self_heal_git() {
  if [[ ! -d "$GIT_LOCAL_DIR/.git" ]]; then
    log "${YELLOW}Cloning BITBOY-AI-DEX repo...${NC}"
    rm -rf "$GIT_LOCAL_DIR"
    git clone "$GIT_REPO" "$GIT_LOCAL_DIR"
  else
    cd "$GIT_LOCAL_DIR" || return
    git fetch --all && git reset --hard origin/main
  fi
  log "${GREEN}Git repo verified${NC}"
}

self_heal_ollama() {
  if ! curl -s http://localhost:11434/api/tags &>/dev/null; then
    log "${YELLOW}Ollama not responding. Attempting restart...${NC}"
    systemctl restart ollama || log "${RED}Failed to restart Ollama${NC}"
    sleep 3
  fi
}

self_healing() {
  check_dependencies
  setup_dirs
  init_db
  self_heal_git
  self_heal_ollama
  log "${GREEN}Self-healing complete${NC}"
}

# --- TRIUVIRATE WORKER ---
run_triumvirate() {
  local prompt="$1"
  local semantic_hash instance_hash
  semantic_hash=$(echo "$prompt" | tr ' ' '-' | tr -cd 'a-zA-Z0-9-' | cut -c1-16)
  instance_hash=$(echo "$prompt$(date +%s%N)" | sha256sum | cut -d' ' -f1 | head -c16)
  local project_path="$PROJECTS_DIR/$semantic_hash/$instance_hash"
  mkdir -p "$project_path"

  # Messenger
  local messenger
  messenger=$(curl -s -X POST http://localhost:11434/api/generate \
    -H "Content-Type: application/json" \
    -d "{\"model\":\"$MESSENGER_MODEL\",\"prompt\":\"$prompt\",\"system\":\"Messenger system\",\"stream\":true}")

  # Combinator
  local combinator
  combinator=$(curl -s -X POST http://localhost:11434/api/generate \
    -H "Content-Type: application/json" \
    -d "{\"model\":\"$COMBINATOR_MODEL\",\"prompt\":\"$messenger\",\"system\":\"Combinator system\",\"stream\":true}")

  # Trader
  local trader
  trader=$(curl -s -X POST http://localhost:11434/api/generate \
    -H "Content-Type: application/json" \
    -d "{\"model\":\"$TRADER_MODEL\",\"prompt\":\"$combinator\",\"system\":\"Trader system\",\"stream\":true}")

  # Save summary
  local summary_file="summary.txt"
  echo "$trader" > "$project_path/$summary_file"
  sqlite3 "$MEMORY_DB" "INSERT INTO memories(prompt,response) VALUES('$(sqlite3_escape "$prompt")','$(sqlite3_escape "$trader")');"

  # Commit & push results
  commit_results_to_repo "$project_path" "$summary_file"

  log "${GREEN}Task complete and synced with repo: $semantic_hash/$instance_hash${NC}"
}

# --- AUTO-COMMIT RESULTS ---
commit_results_to_repo() {
  local project_path="$1"
  local file_name="$2"
  local commit_msg="AI update: $(date '+%Y-%m-%d %H:%M:%S')"

  if [[ -d "$GIT_LOCAL_DIR" ]]; then
    cd "$GIT_LOCAL_DIR" || return 1
    cp "$project_path/$file_name" "$GIT_LOCAL_DIR/" || return 1
    git add "$file_name"
    git commit -m "$commit_msg" 2>/dev/null || log "${YELLOW}Nothing to commit${NC}"
    git push origin main || log "${RED}Failed to push to remote${NC}"
    log "${GREEN}Results committed and pushed: $file_name${NC}"
  else
    log "${RED}Git repo not found: $GIT_LOCAL_DIR${NC}"
  fi
}

# --- MAIN ---
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  self_healing
  if [ $# -eq 0 ]; then
    echo "Usage: $0 '<prompt>'"
    exit 1
  fi
  run_triumvirate "$*"
fi
