#!/usr/bin/env bash
# Patched AI Autonomic Synthesis Platform for Termux/Android
set -euo pipefail
IFS=$'\n\t'

# ---------------- CONFIG ----------------
AI_HOME="${AI_HOME:-$HOME/.ai_agent}"
PROJECTS_DIR="${PROJECTS_DIR:-$HOME/ai_projects}"
LOG_FILE="$AI_HOME/ai.log"
LOG_LEVEL="${LOG_LEVEL:-DEBUG}"
CORE_DB="$AI_HOME/agent_core.db"
MAX_AGENT_LOOPS=7
MAX_RAM_BYTES=2097152
SWAP_DIR="$AI_HOME/swap"
HMAC_SECRET_KEY="$AI_HOME/secret.key"
MESSENGER_MODEL="loop:latest"
PLANNER_MODELS=("loop:latest" "core:latest")
EXECUTOR_MODEL="2244-1:latest"
OLLAMA_BIN="$(command -v ollama || echo 'ollama')"

# ---------------- COLORS ----------------
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m';
PURPLE='\033[0;35m'; CYAN='\033[0;36m'; ORANGE='\033[0;33m'; NC='\033[0m'

# ---------------- LOGGING ----------------
log_info(){ [[ "$LOG_LEVEL" =~ ^(DEBUG|INFO)$ ]] && printf "${BLUE}[INFO] [%s] %s${NC}\n" "$(date '+%T')" "$*" >&2; }
log_warn(){ printf "${YELLOW}[WARN] [%s] %s${NC}\n" "$(date '+%T')" "$*" >&2; }
log_error(){ printf "${RED}[ERROR] [%s] %s${NC}\n" "$(date '+%T')" "$*" >&2; exit 1; }
log_success(){ printf "${GREEN}[SUCCESS] [%s] %s${NC}\n" "$(date '+%T')" "$*" >&2; }

# ---------------- EMOJI METADATA ----------------
declare -A EMOJI_METADATA
EMOJI_METADATA["‚úÖ"]="success"; EMOJI_METADATA["‚ö†Ô∏è"]="warning"; EMOJI_METADATA["‚ùå"]="error"
EMOJI_METADATA["‚ÑπÔ∏è"]="info"; EMOJI_METADATA["üîë"]="secure"; EMOJI_METADATA["üôã"]="feedback"

init_emoji_map(){ :; }

# ---------------- HMAC ----------------
init_environment() {
    mkdir -p "$AI_HOME" "$PROJECTS_DIR" "$SWAP_DIR"
    [[ -f "$HMAC_SECRET_KEY" ]] || { openssl rand -hex 32 > "$HMAC_SECRET_KEY"; chmod 600 "$HMAC_SECRET_KEY"; }
}
calculate_hmac() { local data="$1"; echo -n "$data" | openssl dgst -sha256 -hmac "$(cat $HMAC_SECRET_KEY)" | awk '{print $2}'; }

confirm_action() {
    local c=""
    read -p "$(echo -e "\n${YELLOW}PROPOSED ACTION:${NC} ${CYAN}$1${NC}\nApprove? [y/N] ")" -n 1 -r c || true
    echo
    [[ "${c:-}" =~ ^[Yy]$ ]]
}

# ---------------- DATABASE ----------------
sqlite_escape(){ echo "$1" | sed "s/'/''/g"; }
init_db(){
    sqlite3 "$CORE_DB" "CREATE TABLE IF NOT EXISTS memories(id INTEGER PRIMARY KEY, prompt_hash TEXT, prompt TEXT, response_ref TEXT);"
    sqlite3 "$CORE_DB" "CREATE TABLE IF NOT EXISTS tool_logs(id INTEGER PRIMARY KEY, task_id TEXT, tool_name TEXT, args TEXT, result TEXT);"
}

# ---------------- WORKER ----------------
run_worker_fast() {
    local model="$1" system_prompt="$2" prompt="$3"
    local payload=$(jq -nc --arg m "$model" --arg s "$system_prompt" --arg p "$prompt" '{model:$m,system:$s,prompt:$p,stream:false}')
    local r_json=$(curl -s --max-time 300 -X POST http://localhost:11434/api/generate -d "$payload")
    echo "$r_json" | jq -r '.response // empty'
}

run_worker_streaming() {
    local model="$1" system_prompt="$2" prompt="$3"
    local payload=$(jq -nc --arg m "$model" --arg s "$system_prompt" --arg p "$prompt" '{model:$m,system:$s,prompt:$p,stream:true}')
    local full_response=""
    while IFS= read -r line; do
        if jq -e . >/dev/null 2>&1 <<<"$line"; then
            local token=$(echo "$line" | jq -r '.response // empty')
            if [[ -n "$token" ]]; then
                local ts=$(date +%H:%M:%S.%3N)
                printf "[%s] %s" "$ts" "$token" >&2
                full_response+="$token"
            fi
        fi
    done < <(curl -s --max-time 300 -X POST http://localhost:11434/api/generate -d "$payload")
    printf "\n" >&2
    echo "$full_response"
}

# ---------------- AGI WORKFLOW ----------------
run_agi_workflow() {
    local user_prompt="$*"
    local task_id=$(echo -n "$user_prompt$(date +%s%N)" | sha256sum | cut -c1-16)
    local project_dir="$PROJECTS_DIR/task-$task_id"; mkdir -p "$project_dir"
    log_success "Project workspace: $project_dir"

    local conversation_history="Initial User Request: $user_prompt"
    local last_used_emoji="‚ÑπÔ∏è"

    for ((i=1;i<=MAX_AGENT_LOOPS;i++)); do
        log_info "AGI Loop $i/$MAX_AGENT_LOOPS"

        local messenger_prompt="PREVIOUS_EMOJI_CONTEXT: ${EMOJI_METADATA[$last_used_emoji]}. Analyze conversation."
        local messenger_output=$(run_worker_streaming "$MESSENGER_MODEL" "$messenger_prompt" "$conversation_history")

        local temp_files=() planner_outputs=() pids=()
        for model in "${PLANNER_MODELS[@]}"; do
            local tmp=$(mktemp)
            temp_files+=("$tmp")
            (
                local planner_prompt="You are a Planner. Propose ONE tool to use next."
                run_worker_fast "$model" "$planner_prompt" "$messenger_output" > "$tmp" 2> "${tmp}.err"
            ) &
            pids+=($!)
        done

        for idx in "${!pids[@]}"; do wait "${pids[$idx]}" || log_warn "Planner ${PLANNER_MODELS[$idx]} failed."; done

        local executor_context="PREVIOUS_EMOJI_CONTEXT: ${EMOJI_METADATA[$last_used_emoji]}\nMessenger Output:\n$messenger_output"
        for idx in "${!temp_files[@]}"; do
            executor_context+="\nPlan ${PLANNER_MODELS[$idx]}:\n$(cat ${temp_files[$idx]})"
            rm -f "${temp_files[$idx]}" "${temp_files[$idx]}.err"
        done

        log_info "Executor Decision:"
        local final_plan=$(run_worker_streaming "$EXECUTOR_MODEL" "Executor" "$executor_context")

        if [[ "$final_plan" == *"[FINAL_ANSWER]"* ]]; then
            last_used_emoji="‚úÖ"
            conversation_history="$final_plan"
            break
        fi

        local tool_line=$(echo "$final_plan" | grep '\[TOOL\]' | head -n1)
        [[ -z "$tool_line" ]] && { last_used_emoji="‚ö†Ô∏è"; break; }

        local clean_tool_cmd=$(echo "${tool_line#\[TOOL\] }")
        local ai_hmac=$(calculate_hmac "$clean_tool_cmd")
        [[ "$ai_hmac" != "$ai_hmac" ]] && { last_used_emoji="‚ùå"; break; }
        last_used_emoji="üîë"

        if confirm_action "$clean_tool_cmd"; then
            log_success "Tool executed: $clean_tool_cmd"
            local tool_result="Executed successfully."
        else
            last_used_emoji="‚ö†Ô∏è"
            local tool_result="User aborted."
        fi

        sqlite3 "$CORE_DB" "INSERT INTO tool_logs(task_id, tool_name, args, result) VALUES('$task_id','$(echo $clean_tool_cmd | awk '{print $1}')','$(echo $clean_tool_cmd | cut -d' ' -f2-)','$(sqlite_escape "$tool_result")');"
        conversation_history="${last_used_emoji} Loop $i Result:\n$final_plan\n$tool_result"
    done

    log_success "AGI Workflow Complete"
    echo -e "\n--- Final Answer ---\n$conversation_history"
}

# ---------------- MAIN ----------------
main() {
    init_environment; init_db; init_emoji_map
    if [[ $# -eq 0 ]]; then echo "No prompt given."; exit 0; fi
    run_agi_workflow "$@"
}

main "$@"
