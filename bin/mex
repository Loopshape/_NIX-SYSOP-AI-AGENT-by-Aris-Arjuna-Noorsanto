#!/usr/bin/env zsh
# ai.sh v8.5 - Screen-Sync Edition
# Mandatory real-time screen sessions with live verbose thinking

set -euo pipefail
IFS=$'\n\t'

# --- CONFIG ---
AI_HOME="${AI_HOME:-$HOME/.ai_agent}"
PROJECTS_DIR="${PROJECTS_DIR:-$HOME/ai_projects}"

DEFAULT_MESSENGER_MODEL="gemma3:1b"
DEFAULT_COMBINATOR_MODEL="deepseek-r1:1.5b"
DEFAULT_TRADER_MODEL="2244-1"

OLLAMA_BIN="$(command -v ollama || true)"
MEMORY_DB="$AI_HOME/memory.db"
CONFIG_DB="$AI_HOME/config.db"

# --- COLORS ---
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; PURPLE='\033[0;35m'; CYAN='\033[0;36m'; NC='\033[0m'

log() { printf "${BLUE}[%s]${NC} %s\n" "$(date '+%T')" "$*"; }
log_success() { log "${GREEN}$*${NC}"; }
log_warn() { log "${YELLOW}WARN: $*${NC}"; }
log_error() { log "${RED}ERROR: $*${NC}"; exit 1; }
log_info() { log "${CYAN}$*${NC}"; }
log_phase() { echo -e "\n${PURPLE}▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓${NC}"; log "${PURPLE}$*${NC}"; echo -e "${PURPLE}▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓${NC}"; }

# --- INIT ---
mkdir -p "$AI_HOME" "$PROJECTS_DIR"

init_db() {
    sqlite3 "$MEMORY_DB" "CREATE TABLE IF NOT EXISTS memories (id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, prompt TEXT, response TEXT, task_id TEXT);" 2>/dev/null || true
    sqlite3 "$CONFIG_DB" "CREATE TABLE IF NOT EXISTS config (key TEXT PRIMARY KEY, value TEXT);" 2>/dev/null || true
}

sqlite_escape() { echo "$1" | sed "s/'/''/g"; }
set_config() { sqlite3 "$CONFIG_DB" "INSERT OR REPLACE INTO config (key,value) VALUES ('$(sqlite_escape "$1")','$(sqlite_escape "$2")');" && log_success "Config set: $1 = $2"; }
get_config() { sqlite3 "$CONFIG_DB" "SELECT value FROM config WHERE key='$(sqlite_escape "$1")';" 2>/dev/null; }
load_config_values() {
    MESSENGER_MODEL="$(get_config messenger_model || echo "$DEFAULT_MESSENGER_MODEL")"
    COMBINATOR_MODEL="$(get_config combinator_model || echo "$DEFAULT_COMBINATOR_MODEL")"
    TRADER_MODEL="$(get_config trader_model || echo "$DEFAULT_TRADER_MODEL")"
}
add_to_memory() { sqlite3 "$MEMORY_DB" "INSERT INTO memories (prompt,response,task_id) VALUES ('$(sqlite_escape "$1")','$(sqlite_escape "$2")','$3');" 2>/dev/null; }
search_memory() { sqlite3 -header -column "$MEMORY_DB" "SELECT timestamp,prompt,response FROM memories WHERE prompt LIKE '%$(sqlite_escape "$1")%' ORDER BY timestamp DESC LIMIT 5;" 2>/dev/null; }

gen_task_id() { echo -n "$1$(date +%s%N)$RANDOM${AI_SEED:-}" | sha256sum | cut -c1-16; }

# --- AI WORKER ---
ensure_ollama_server() { if ! pgrep -f "ollama serve" >/dev/null; then log "Ollama server starting..."; nohup "$OLLAMA_BIN" serve >/dev/null 2>&1 & sleep 3; fi }

run_worker_raw() {
    local model="$1" system_prompt="$2" conversation_history="$3"
    ensure_ollama_server

    local temperature="$(get_config temperature || echo "0.7")"
    local top_p="$(get_config top_p || echo "0.9")"
    local seed="$(get_config seed || echo "")"

    local json_payload
    json_payload=$(jq -n \
        --arg model "$model" \
        --arg system "$system_prompt" \
        --arg prompt "$conversation_history" \
        --argjson temp "$temperature" \
        --argjson top_p "$top_p" \
        '{ "model": $model, "system": $system, "prompt": $prompt, "options": { "temperature": $temp, "top_p": $top_p } }')

    if [[ -n "$seed" ]]; then
        json_payload=$(echo "$json_payload" | jq --argjson seed "$seed" '.options.seed=$seed')
    fi

    "$OLLAMA_BIN" run --verbose "$model" --temperature "$temperature" --top-p "$top_p" ${seed:+--seed "$seed"} "$system_prompt"$'\n'"$conversation_history"
}

# --- SCREEN MANAGEMENT ---
start_screen_session() {
    local task_id="$1"
    local command="$2"
    if screen -list | grep -q "ai-sync-$task_id"; then
        log_info "Reattaching to existing screen session ai-sync-$task_id"
        screen -r "ai-sync-$task_id"
    else
        log_info "Starting new screen session ai-sync-$task_id"
        screen -S "ai-sync-$task_id" -dm zsh -c "$command"
        screen -r "ai-sync-$task_id"
    fi
}

# --- TRIUMVIRATE ---
run_triumvirate_agent() {
    local user_prompt="$*"
    log_phase "PHASE 0: PROJECTION & SETUP"
    local task_id=$(gen_task_id "$user_prompt")
    local task_dir="$PROJECTS_DIR/$task_id"
    mkdir -p "$task_dir"
    log_success "Task ID: $task_id"
    log_info "Workspace: $task_dir"

    local relevant_memories=$(search_memory "$user_prompt")

    log_phase "PHASE 1: ASYNCHRONOUS BRAINSTORMING"
    local messenger_prompt="You are MESSENGER. Tools: list_directory, web_search, read_file. User Request: $user_prompt"
    local combinator_prompt="You are COMBINATOR. Tools: write_file. User Request: $user_prompt"

    start_screen_session "$task_id-messenger" "run_worker_raw '$MESSENGER_MODEL' '$messenger_prompt' '$relevant_memories' | tee '$task_dir/messenger.log'"
    start_screen_session "$task_id-combinator" "run_worker_raw '$COMBINATOR_MODEL' '$combinator_prompt' '$relevant_memories' | tee '$task_dir/combinator.log'"

    log_phase "PHASE 2: SYNTHESIS & EXECUTION"
    local messenger_response=$(<"$task_dir/messenger.log")
    local combinator_response=$(<"$task_dir/combinator.log")
    local trader_prompt="You are TRADER. Merge Messenger & Combinator info. Use [FINAL_ANSWER] tag.\n---MESSENGER---\n$messenger_response\n---COMBINATOR---\n$combinator_response"

    start_screen_session "$task_id-trader" "run_worker_raw '$TRADER_MODEL' '$trader_prompt' '$relevant_memories' | tee '$task_dir/trader.log'"

    log_phase "PHASE 3: FINALIZATION"
    local trader_response=$(<"$task_dir/trader.log")
    if echo "$trader_response" | grep -q '\[FINAL_ANSWER\]'; then
        log_success "Trader produced final answer!"
        add_to_memory "$user_prompt" "$trader_response" "$task_id"
    else
        log_warn "Trader did not produce [FINAL_ANSWER]."
    fi
}

# --- MAIN ---
main() {
    init_db
    load_config_values

    if [[ $# -eq 0 ]]; then
        echo "Usage: $0 \"Your high-level goal\""; exit 0
    fi

    case "$1" in
        --setup)
            log_info "Installing dependencies..."
            if command -v apt-get &>/dev/null; then
                sudo apt-get update && sudo apt-get install -y sqlite3 jq curl tree lynx screen
            elif command -v brew &>/dev/null; then
                brew install sqlite jq curl tree lynx screen
            fi
            log_success "Setup complete.";;
        --help)
            echo "Usage: $0 [OPTIONS] \"Your high-level goal\"";;
        *)
            run_triumvirate_agent "$*";;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then main "$@"; fi
